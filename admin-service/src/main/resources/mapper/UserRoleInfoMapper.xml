<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fun.dfwh.admin.mapper.UserRoleInfoMapper">

    <resultMap id="BaseResultMap" type="fun.dfwh.admin.entity.UserRoleInfo">
            <id property="userId" column="user_id" jdbcType="BIGINT"/>
            <id property="roleId" column="role_id" jdbcType="INTEGER"/>
            <result property="createBy" column="create_by" jdbcType="VARCHAR"/>
            <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
            <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
            <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        user_id,role_id,create_by,
        created_time,update_by,update_time
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_role_info
        where  user_id = #{userId,jdbcType=BIGINT} AND role_id = #{roleId,jdbcType=INTEGER} 
    </select>
    <select id="selectByUserId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_role_info
        where  user_id = #{userId}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from user_role_info
        where  user_id = #{userId,jdbcType=BIGINT} AND role_id = #{roleId,jdbcType=INTEGER} 
    </delete>
    <insert id="insert">
        insert into user_role_info
        ( user_id,role_id,create_by
        ,created_time,update_by,update_time
        )
        values (#{userId,jdbcType=BIGINT},#{roleId,jdbcType=INTEGER},#{createBy,jdbcType=VARCHAR}
        ,#{createdTime,jdbcType=TIMESTAMP},#{updateBy,jdbcType=VARCHAR},#{updateTime,jdbcType=TIMESTAMP}
        )
    </insert>
    <insert id="insertSelective">
        insert into user_role_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="userId != null">user_id,</if>
                <if test="roleId != null">role_id,</if>
                <if test="createBy != null">create_by,</if>
                <if test="createdTime != null">created_time,</if>
                <if test="updateBy != null">update_by,</if>
                <if test="updateTime != null">update_time,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="userId != null">#{userId,jdbcType=BIGINT},</if>
                <if test="roleId != null">#{roleId,jdbcType=INTEGER},</if>
                <if test="createBy != null">#{createBy,jdbcType=VARCHAR},</if>
                <if test="createdTime != null">#{createdTime,jdbcType=TIMESTAMP},</if>
                <if test="updateBy != null">#{updateBy,jdbcType=VARCHAR},</if>
                <if test="updateTime != null">#{updateTime,jdbcType=TIMESTAMP},</if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="fun.dfwh.admin.entity.UserRoleInfo">
        update user_role_info
        <set>
                <if test="createBy != null">
                    create_by = #{createBy,jdbcType=VARCHAR},
                </if>
                <if test="createdTime != null">
                    created_time = #{createdTime,jdbcType=TIMESTAMP},
                </if>
                <if test="updateBy != null">
                    update_by = #{updateBy,jdbcType=VARCHAR},
                </if>
                <if test="updateTime != null">
                    update_time = #{updateTime,jdbcType=TIMESTAMP},
                </if>
        </set>
        where   user_id = #{userId,jdbcType=BIGINT} AND role_id = #{roleId,jdbcType=INTEGER} 
    </update>
    <update id="updateByPrimaryKey" parameterType="fun.dfwh.admin.entity.UserRoleInfo">
        update user_role_info
        set 
            create_by =  #{createBy,jdbcType=VARCHAR},
            created_time =  #{createdTime,jdbcType=TIMESTAMP},
            update_by =  #{updateBy,jdbcType=VARCHAR},
            update_time =  #{updateTime,jdbcType=TIMESTAMP}
        where   user_id = #{userId,jdbcType=BIGINT} AND role_id = #{roleId,jdbcType=INTEGER} 
    </update>
</mapper>
